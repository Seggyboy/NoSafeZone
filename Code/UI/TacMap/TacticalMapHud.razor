@using Sandbox
@using Sandbox.UI
@namespace Sandbox
@inherits PanelComponent

<div class="tactical-map-hud">
	@if (Controller?.PlayersTurn == true)
	{
		<div class="hud-box">
			<span class="turn-label">Player's Turn</span>
			<button class="button" @onclick="@EndTurn">End Turn</button>
		</div>
	}
	else
	{
		<div class="hud-box">
			<span class="turn-label">AI's Turn</span>
		</div>

		
	}

</div>

<div class= "action-bar">
	@if (Controller?.PlayersTurn == true)
	{
		<div class="action-bar-box">
			<button class="action-button" onclick="@StartAttack">Fire Weapon</button>
			<button class="action-button" onclick="@Reload">Reload</button>
			<button class="action-button">Action 3</button>
		</div>
	}
	else
	{
		<div class="action-bar-box">
			<span class="waiting-label">Waiting for AI...</span>
		</div>
	}

	<div class="Attack UI">
		@if (Controller?.State == ControllerStates.AttackAction)
		{
			<div class="attack-menu-ui">

				<span class="tu-cost">Attack: -3 TU</span>
				<button class="attack-button" onclick="@InitAttack">Confirm Attack</button>
				<button class="attack-button" onclick="@CancelAttack">Cancel Attack</button>
			</div>
		}
	</div>
</div>

<div class = "unit-selector">
	@if (Controller?.SelectedUnit != null)
	{
		<div class="selection-box">
			<span class="unit-name">@Controller.SelectedUnit.GameObject.Name</span>
			<span class="unit-health">Health: @Controller.SelectedUnit.Health</span>
			<span class="unit-tus">TUs: @Controller.SelectedUnit.TimeUnits / @Controller.SelectedUnit.MaxTimeUnits </span>
		</div>
	}
</div>









@code {
	[Property] public IsometricController Controller { get; set; }
	[Property] public Board board { get; set; }

	void LoadBoard()
	{
		Log.Info("Loading Board");
		if (board != null)
		{
			board.GenerateMap();
			
		}
		else
		{
			Log.Error("Board is null, cannot load.");
		}
	}
	void EndTurn()
	{
		Log.Info("Pressed end turn button");
		Controller?.EndTurn();

	}

	void StartAttack()
	{
		Log.Info("Pressed attack button");
		Controller?.StartAttack();
	}

	public void CancelAttack()
	{
		Log.Info("Cancelled Attack");
		Controller?.StartMove();
	}

	void InitAttack()
	{
		Log.Info("Confirmed Attack");
		Controller.SelectedUnit?.Shoot(Controller?.TargetUnit.CurrentTile);
	}

	void Reload()
	{
		Log.Info("Reloading weapon");
		Controller?.SelectedUnit?.weapon?.Reload();
	}

	protected override int BuildHash()
	{
		return System.HashCode.Combine(
		Controller?.PlayersTurn,
		Controller?.State,
		Controller?.SelectedUnit,
		Controller?.SelectedUnit?.TimeUnits,
		Controller?.SelectedUnit?.Health);

	}
}
